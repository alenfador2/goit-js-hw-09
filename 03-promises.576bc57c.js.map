{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBACvBD,SAASC,cAAc,yBAwBtC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,aAAY,WACYC,KAAKC,SAAW,GAEpCJ,EAAQ,CACNH,WACAQ,MAAAP,IAIFG,EAAO,CACLJ,WACAQ,MAAAP,G,GAIHA,E,IAxCMN,SAASC,cAAc,SAC/Ba,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAIN,IAHA,IAAMC,EAAWC,SAASnB,EAAMoB,OAC1BC,EAAUF,SAAShB,EAAKiB,OACxBE,EAAYH,SAASf,EAAOgB,OACzBG,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAElClB,EAAckB,EADGL,EAAWG,EAAUE,GAEnCC,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUoB,EAAKD,EAALX,MACjBa,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANJ,EAAM,OAEhDK,QAAQC,IAAI,uBAAwCF,OAAfxB,EAAS,QAAYwB,OAANJ,EAAM,M,IAE3DO,OAAM,SAAAR,G,IAAGnB,EAAQmB,EAARnB,SAAU4B,EAAKT,EAALX,MAClBa,EAAA7B,GAAS8B,OAAOO,QACd,sBAAuCL,OAAfxB,EAAS,QAAYwB,OAANI,EAAM,OAE/CH,QAAQC,IAAI,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANI,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst button = document.querySelector('button[type=\"submit\"]');\nconst form = document.querySelector('.form');\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const delayVal = parseInt(delay.value);\n  const stepVal = parseInt(step.value);\n  const amountVal = parseInt(amount.value);\n  for (let i = 0; i < amountVal; i++) {\n    const sumDelay = delayVal + stepVal * i;\n    createPromise(i, sumDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay\n        });\n        // Fulfill\n      } else {\n        reject({\n          position,\n          delay\n        });\n        // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","setInterval","Math","random","delay","addEventListener","event","preventDefault","delayVal","parseInt","value","stepVal","amountVal","i","then","param","delay1","$parcel$interopDefault","Notify","success","concat","console","log","catch","delay2","failure"],"version":3,"file":"03-promises.576bc57c.js.map"}