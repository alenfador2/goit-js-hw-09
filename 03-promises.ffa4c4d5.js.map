{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAQC,SAASC,cAAc,uBAC/BC,EAAOF,SAASC,cAAc,sBAC9BE,EAASH,SAASC,cAAc,wBACvBD,SAASC,cAAc,yBAwBtC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,aAAY,KACYC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SACNH,EACAQ,MAAAP,EACAQ,OAAQ,8CAIVL,EAAO,C,SACLJ,EACAQ,MAAAP,EACAQ,OAAQ,0CACR,GAGHR,EAAM,G,CA1CAN,SAASC,cAAc,SAC/Bc,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAAWC,SAASpB,EAAMqB,OAC1BC,EAAUF,SAASjB,EAAKkB,OACxBE,EAAYH,SAAShB,EAAOiB,OAClC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAElCnB,EAAcmB,EADGL,EAAWG,EAAUE,GAEnCC,MAAK,EAACnB,SAAEA,EAAUQ,MAAAY,MACjBC,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBvB,QAAiBoB,OAExCI,QAAQC,IAAI,uBAAqBzB,QAAiBoB,MAAU,IAE7DM,OAAM,EAAC1B,SAAEA,EAAUQ,MAAAmB,MAClBN,EAAA7B,GAAS8B,OAAOM,QACd,sBAAoB5B,QAAiB2B,OAEvCH,QAAQC,IAAI,sBAAoBzB,QAAe2B,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('input[name=\"delay\"]');\nconst step = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\nconst button = document.querySelector('button[type=\"submit\"]');\nconst form = document.querySelector('.form');\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const delayVal = parseInt(delay.value);\n  const stepVal = parseInt(step.value);\n  const amountVal = parseInt(amount.value);\n  for (let i = 0; i < amountVal; i++) {\n    const sumDelay = delayVal + stepVal * i;\n    createPromise(i, sumDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay,\n          result: 'Success! Value passed to resolve function',\n        });\n        // Fulfill\n      } else {\n        reject({\n          position,\n          delay,\n          result: 'Error! Error passed to reject function',\n        });\n        // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delay","document","querySelector","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","setInterval","Math","random","delay","result","addEventListener","event","preventDefault","delayVal","parseInt","value","stepVal","amountVal","i","then","delay1","$parcel$interopDefault","Notify","success","console","log","catch","delay2","failure"],"version":3,"file":"03-promises.ffa4c4d5.js.map"}